name: CI

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'

env:
  UPLOAD_BUILD: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        examples:
          - "blink"
          - "wifiscan"
          - "simba-blink"
          - "pumbaa-blink"
        package:
          - "release"
          - "latest"

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: Python ${{ matrix.python }}
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install release
        if: matrix.package == 'release'
        run: |
          python -m pip install --upgrade pip
          pip install -U https://github.com/OS-Q/S03/archive/master.zip
          pio platform install https://github.com/OS-Q/P52/releases/latest/download/P52.zip

      - name: Install latest
        if: matrix.package == 'latest'
        run: |
          python -m pip install --upgrade pip
          pip install -U https://github.com/OS-Q/S03/archive/master.zip
          qio platform install file://.

      - name: Folder win
        if: success() && matrix.os == 'windows-latest'
        run: |
          md examples/${{ matrix.examples }}/build

      - name: Folder
        if: success() && matrix.os != 'windows-latest'
        run: |
          mkdir examples/${{ matrix.examples }}/build

      - name: Build
        id: build
        if: success() && github.repository == 'OS-Q/P52'
        run: |
          pio run -d examples/${{ matrix.examples }} > build/log.txt
          echo "::set-output name=status::success"

      - name: Upload
        if: steps.build.outputs.status == 'success' && env.UPLOAD_BUILD == 'true' && matrix.package == 'latest'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.examples }}
          path: examples/${{ matrix.examples }}/build

      - name: notification
        uses: stopstopstop/mqtt-action@master
        with:
          protocol: mqtt
          host: ${{secrets.MQTT_SERVER}}
          port: 1883
          username: ${{secrets.MQTT_USERNAME}}
          password: ${{secrets.MQTT_PASSWORD}}
          topic: ${{github.repository}}/${{github.workflow}}/${{ matrix.package }}/${{ matrix.examples }}
          message: ${{steps.build.outputs.status}}

